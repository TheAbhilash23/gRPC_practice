# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import greeting_pb2 as greeting__pb2


class GreetingsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/Greetings/SayHello',
                request_serializer=greeting__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeting__pb2.HelloReply.FromString,
                )
        self.DrawHello = channel.unary_unary(
                '/Greetings/DrawHello',
                request_serializer=greeting__pb2.DrawRequest.SerializeToString,
                response_deserializer=greeting__pb2.DrawReply.FromString,
                )
        self.ImageHello = channel.stream_unary(
                '/Greetings/ImageHello',
                request_serializer=greeting__pb2.ImageRequest.SerializeToString,
                response_deserializer=greeting__pb2.ImageReply.FromString,
                )
        self.VideoHello = channel.stream_stream(
                '/Greetings/VideoHello',
                request_serializer=greeting__pb2.VideoRequest.SerializeToString,
                response_deserializer=greeting__pb2.VideoReply.FromString,
                )


class GreetingsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrawHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageHello(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoHello(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreetingsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=greeting__pb2.HelloRequest.FromString,
                    response_serializer=greeting__pb2.HelloReply.SerializeToString,
            ),
            'DrawHello': grpc.unary_unary_rpc_method_handler(
                    servicer.DrawHello,
                    request_deserializer=greeting__pb2.DrawRequest.FromString,
                    response_serializer=greeting__pb2.DrawReply.SerializeToString,
            ),
            'ImageHello': grpc.stream_unary_rpc_method_handler(
                    servicer.ImageHello,
                    request_deserializer=greeting__pb2.ImageRequest.FromString,
                    response_serializer=greeting__pb2.ImageReply.SerializeToString,
            ),
            'VideoHello': grpc.stream_stream_rpc_method_handler(
                    servicer.VideoHello,
                    request_deserializer=greeting__pb2.VideoRequest.FromString,
                    response_serializer=greeting__pb2.VideoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greetings', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greetings(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greetings/SayHello',
            greeting__pb2.HelloRequest.SerializeToString,
            greeting__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrawHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greetings/DrawHello',
            greeting__pb2.DrawRequest.SerializeToString,
            greeting__pb2.DrawReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageHello(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Greetings/ImageHello',
            greeting__pb2.ImageRequest.SerializeToString,
            greeting__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoHello(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Greetings/VideoHello',
            greeting__pb2.VideoRequest.SerializeToString,
            greeting__pb2.VideoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
